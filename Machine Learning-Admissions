url <-"https://raw.githubusercontent.com/jcbonilla/BusinessAnalytics/master/BAData/Univ%20Admissions.csv" 
imbalance.data<-read.csv(url, header = TRUE)

str(imbalance.data)
table(imbalance.data$x.Status.1)
prop.table(table(imbalance.data$x.Status.1))  # we see uneven distributions in target variable

# let's two variables Apps as positive class and NonApps as negative class
imbalance.data$Apps <- as.logical(0)
imbalance.data$NonApps <- as.logical(0)

for(i in 1:nrow(imbalance.data)) {
  if (imbalance.data$x.Status.1[i]=="APPLICANT")
    imbalance.data$Apps[i] <- as.logical(1)
  else
    imbalance.data$NonApps[i] <- as.logical(1)
}


#Sampling Method 1: ROSE
library(caret)  #function createDataPartition()
#Lets create our training dataset with a 70/30 split
set.seed(123)
index <- createDataPartition(imbalance.data$Apps, p=0.7, list=FALSE)
train.imbalanced <- imbalance.data[ index,] 
test<- imbalance.data[ -index,] 


table(train.imbalanced$Apps)
prop.table(table(train.imbalanced$Apps))  #Apps is the minority class at 5.6%
barplot(prop.table(table(train.imbalanced$Apps)))

library(ROSE)
train.imbalanced$Apps<-as.integer(train.imbalanced$Apps)

train.under<-ovun.sample(Apps~., data = train.imbalanced, method = "under", N= 17500)$data  
prop.table(table(train.under$Apps))

train.over<-ovun.sample(Apps~., data = train.imbalanced, method = "over", N= 297522)$data

prop.table(table(train.over$Apps))

train.both<-ovun.sample(Apps~., data = train.imbalanced, method = "both", N= 297522)$data
prop.table(table(train.both$Apps))


# Model trainig
library(rpart)
test$Apps<-as.integer(test$Apps)
model.imbalance <- rpart(Apps~ x.Country + x.State + x.Gender + x.Source + x.GPA + x.SAT_Score + x.DistancetoCampus_miles + x.HouseholdIncome + x.InState,
                         data=train.imbalanced, 
                         method="class")
model.under <- rpart(Apps~ x.Country + x.State + x.Gender + x.Source + x.GPA + x.SAT_Score + x.DistancetoCampus_miles + x.HouseholdIncome + x.InState,
                     data=train.under, 
                     method="class")
model.over <- rpart(Apps~ x.Country + x.State + x.Gender + x.Source + x.GPA + x.SAT_Score + x.DistancetoCampus_miles + x.HouseholdIncome + x.InState,
                    data=train.over, 
                    method="class")
model.both <- rpart(Apps~ x.Country + x.State + x.Gender + x.Source + x.GPA + x.SAT_Score + x.DistancetoCampus_miles + x.HouseholdIncome + x.InState,
                    data=train.both, 
                    method="class")

rpart.plot(model.imbalance)

predict.imbalance <- predict(model.imbalance, test, type='class', positive=1)
predict.under <- predict(model.under, test, type='class')
predict.over <- predict(model.over, test, type='class')
predict.both <- predict(model.both, test, type='class')

actuals<-as.factor(test$Apps)
table(predict.imbalance, actuals)
table(predict.under, actuals)
table(predict.over, actuals)
table(predict.both, actuals)

prediction.prob <- predict(model.imbalance, test, type = "prob")
plot(roc(test$Apps,prediction.prob[,2])) 
auc(test$Apps,prediction.prob[,2]) 
auc(test$Apps,prediction.prob[,2])

require(caret)
confusionMatrix(predict.imbalance, actuals, positive = "1")
confusionMatrix(predict.under, actuals, positive = "1")
confusionMatrix(predict.over, actuals, positive = "1")
confusionMatrix(predict.both, actuals, positive = "1")

#Model
precision_num<-(63328)/(63328+1270) 
precision_num
recall<-(63328)/(63328+426)
recall
F_score<-2*((0.9803399*0.9933181)/(0.9803399+0.9933181))
F_score
G_score<-sqrt(0.9803399*0.9933181)
G_score
